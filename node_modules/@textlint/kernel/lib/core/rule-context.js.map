{"version":3,"sources":["../../src/core/rule-context.js"],"names":["RuleContext","assert","require","ruleFixer","ruleId","sourceCode","report","textLintConfig","ruleOptions","configBaseDir","Object","defineProperty","value","severity","node","ruleError","level","error","Syntax","getSyntax","getFilePath","bind","getSource","getConfigBaseDir","RuleError","fixer"],"mappings":"AAAA;AACA;;;;;kBAuBwBA,W;;AArBxB;;;;AACA;;;;AACA;;;;AACA;;;;AAJA,IAAMC,SAASC,QAAQ,QAAR,CAAf;;AAKA;AACA,IAAMC,YAAY,yBAAlB;AACA;;;;;AAKA;;;;;;;;;;AAUe,SAASH,WAAT,OAAiG;AAAA,MAA1EI,MAA0E,QAA1EA,MAA0E;AAAA,MAAlEC,UAAkE,QAAlEA,UAAkE;AAAA,MAAtDC,MAAsD,QAAtDA,MAAsD;AAAA,MAA9CC,cAA8C,QAA9CA,cAA8C;AAAA,MAA9BC,WAA8B,QAA9BA,WAA8B;AAAA,MAAjBC,aAAiB,QAAjBA,aAAiB;;AAC5GC,SAAOC,cAAP,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC,EAAEC,OAAOR,MAAT,EAAlC;AACA;;;;;AAKAM,SAAOC,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC,EAAEC,OAAOL,cAAT,EAAtC;AACA,MAAMM,WAAW,+BAAYL,WAAZ,CAAjB;;AAEA;;;;;AAKA,OAAKF,MAAL,GAAc,UAASQ,IAAT,EAAeC,SAAf,EAA0B;AACpCd,WAAO,EAAEa,mCAAF,CAAP,EAAqC,sCAArC;AACA,QAAIC,wCAAJ,EAAoC;AAChCT,aAAO,EAAEF,cAAF,EAAUU,UAAV,EAAgBD,kBAAhB,EAA0BE,oBAA1B,EAAP;AACH,KAFD,MAEO;AACH,UAAMC,QAAQD,UAAUF,QAAV,IAAsB,wBAAcI,KAAlD;AACAX,aAAO,EAAEF,cAAF,EAAUU,UAAV,EAAgBD,UAAUG,KAA1B,EAAiCD,oBAAjC,EAAP;AACH;AACJ,GARD;AASA;;;;AAIA,OAAKG,MAAL,GAAcb,WAAWc,SAAX,EAAd;AACA;;;;AAIA,OAAKC,WAAL,GAAmBf,WAAWe,WAAX,CAAuBC,IAAvB,CAA4BhB,UAA5B,CAAnB;AACA;;;;AAIA,OAAKiB,SAAL,GAAiBjB,WAAWiB,SAAX,CAAqBD,IAArB,CAA0BhB,UAA1B,CAAjB;;AAEA;;;;;;;;;;;;;AAaA,OAAKkB,gBAAL,GAAwB,YAAM;AAC1B,WAAOd,aAAP;AACH,GAFD;AAGA;;;;AAIA,OAAKe,SAAL;AACA;;;;AAIA,OAAKC,KAAL,GAAatB,SAAb;AACH","file":"rule-context.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\nimport RuleFixer from \"../fixer/rule-fixer\";\nimport RuleError from \"./rule-error\";\nimport SeverityLevel from \"../shared/type/SeverityLevel\";\nimport { getSeverity } from \"../shared/rule-severity\";\n// instance for rule context\nconst ruleFixer = new RuleFixer();\n/**\n * This callback is displayed as a global member.\n * @callback ReportCallback\n * @param {ReportMessage} message\n */\n/**\n * Rule context object is passed to each rule as `context`\n * @param {string} ruleId\n * @param {SourceCode} sourceCode\n * @param {ReportCallback} report\n * @param {Config} textLintConfig\n * @param {Object|boolean} ruleOptions\n * @param {string} [configBaseDir]\n * @constructor\n */\nexport default function RuleContext({ ruleId, sourceCode, report, textLintConfig, ruleOptions, configBaseDir }) {\n    Object.defineProperty(this, \"id\", { value: ruleId });\n    /**\n     * Please use `getConfigBaseDir` insteadof it.\n     * @see https://github.com/textlint/textlint/issues/294\n     * @deprecated\n     */\n    Object.defineProperty(this, \"config\", { value: textLintConfig });\n    const severity = getSeverity(ruleOptions);\n\n    /**\n     * report function that is called in a rule\n     * @param {TxtNode} node\n     * @param {RuleError|any} ruleError error is a RuleError instance or any data\n     */\n    this.report = function(node, ruleError) {\n        assert(!(node instanceof RuleError), \"should be `report(node, ruleError);`\");\n        if (ruleError instanceof RuleError) {\n            report({ ruleId, node, severity, ruleError });\n        } else {\n            const level = ruleError.severity || SeverityLevel.error;\n            report({ ruleId, node, severity: level, ruleError });\n        }\n    };\n    /**\n     * Node's type values\n     * @type {TextLintNodeType}\n     */\n    this.Syntax = sourceCode.getSyntax();\n    /**\n     * get file path current processing.\n     * @type {Function}\n     */\n    this.getFilePath = sourceCode.getFilePath.bind(sourceCode);\n    /**\n     * get source code text\n     * @type {Function}\n     */\n    this.getSource = sourceCode.getSource.bind(sourceCode);\n\n    /**\n     * get config base directory path\n     * config base directory path often is the place of .textlintrc\n     *\n     * e.g.) /path/to/dir/.textlintrc\n     * `getConfigBaseDir()` return `\"/path/to/dir/\"`.\n     *\n     * When using textlint as module, it is specified by `configBaseDir`\n     * If not found the value, return undefined.\n     *\n     * You can use it for resolving relative path from config dir.\n     * @returns {string|undefined}\n     */\n    this.getConfigBaseDir = () => {\n        return configBaseDir;\n    };\n    /**\n     * CustomError object\n     * @type {RuleError}\n     */\n    this.RuleError = RuleError;\n    /**\n     * Rule fixer command object\n     * @type {RuleFixer}\n     */\n    this.fixer = ruleFixer;\n}\n"]}