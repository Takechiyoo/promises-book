// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RuleContext;

var _ruleFixer = require("../fixer/rule-fixer");

var _ruleFixer2 = _interopRequireDefault(_ruleFixer);

var _ruleError = require("./rule-error");

var _ruleError2 = _interopRequireDefault(_ruleError);

var _SeverityLevel = require("../shared/type/SeverityLevel");

var _SeverityLevel2 = _interopRequireDefault(_SeverityLevel);

var _ruleSeverity = require("../shared/rule-severity");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var assert = require("assert");

// instance for rule context
var ruleFixer = new _ruleFixer2.default();
/**
 * This callback is displayed as a global member.
 * @callback ReportCallback
 * @param {ReportMessage} message
 */
/**
 * Rule context object is passed to each rule as `context`
 * @param {string} ruleId
 * @param {SourceCode} sourceCode
 * @param {ReportCallback} report
 * @param {Config} textLintConfig
 * @param {Object|boolean} ruleOptions
 * @param {string} [configBaseDir]
 * @constructor
 */
function RuleContext(_ref) {
  var ruleId = _ref.ruleId,
      sourceCode = _ref.sourceCode,
      report = _ref.report,
      textLintConfig = _ref.textLintConfig,
      ruleOptions = _ref.ruleOptions,
      configBaseDir = _ref.configBaseDir;

  Object.defineProperty(this, "id", { value: ruleId });
  /**
   * Please use `getConfigBaseDir` insteadof it.
   * @see https://github.com/textlint/textlint/issues/294
   * @deprecated
   */
  Object.defineProperty(this, "config", { value: textLintConfig });
  var severity = (0, _ruleSeverity.getSeverity)(ruleOptions);

  /**
   * report function that is called in a rule
   * @param {TxtNode} node
   * @param {RuleError|any} ruleError error is a RuleError instance or any data
   */
  this.report = function (node, ruleError) {
    assert(!(node instanceof _ruleError2.default), "should be `report(node, ruleError);`");
    if (ruleError instanceof _ruleError2.default) {
      report({ ruleId: ruleId, node: node, severity: severity, ruleError: ruleError });
    } else {
      var level = ruleError.severity || _SeverityLevel2.default.error;
      report({ ruleId: ruleId, node: node, severity: level, ruleError: ruleError });
    }
  };
  /**
   * Node's type values
   * @type {TextLintNodeType}
   */
  this.Syntax = sourceCode.getSyntax();
  /**
   * get file path current processing.
   * @type {Function}
   */
  this.getFilePath = sourceCode.getFilePath.bind(sourceCode);
  /**
   * get source code text
   * @type {Function}
   */
  this.getSource = sourceCode.getSource.bind(sourceCode);

  /**
   * get config base directory path
   * config base directory path often is the place of .textlintrc
   *
   * e.g.) /path/to/dir/.textlintrc
   * `getConfigBaseDir()` return `"/path/to/dir/"`.
   *
   * When using textlint as module, it is specified by `configBaseDir`
   * If not found the value, return undefined.
   *
   * You can use it for resolving relative path from config dir.
   * @returns {string|undefined}
   */
  this.getConfigBaseDir = function () {
    return configBaseDir;
  };
  /**
   * CustomError object
   * @type {RuleError}
   */
  this.RuleError = _ruleError2.default;
  /**
   * Rule fixer command object
   * @type {RuleFixer}
   */
  this.fixer = ruleFixer;
}
//# sourceMappingURL=rule-context.js.map