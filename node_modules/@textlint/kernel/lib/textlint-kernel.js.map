{"version":3,"sources":["../src/textlint-kernel.js"],"names":["assert","require","Ajv","ajv","TextlintKernelOptionsSchema","findPluginWithExt","plugins","ext","matchPlugins","filter","kernelPlugin","plugin","ok","Processor","availableExtensions","name","extList","some","targetExt","length","addingAtFileNameToError","fileName","message","TextlintKernel","config","messageProcessManager","add","text","options","valid","validate","Promise","reject","Error","JSON","stringify","errors","undefined","processor","_parallelProcess","_sequenceProcess","filePath","rules","filterRules","configBaseDir","preProcess","postProcess","ast","sourceCode","linterProcessor","process","catch","error","fixerProcessor"],"mappings":"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","file":"textlint-kernel.js","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\nconst assert = require(\"assert\");\nconst Ajv = require(\"ajv\");\nconst ajv = new Ajv();\nconst TextlintKernelOptionsSchema = require(\"./TextlintKernelOptions.json\");\nimport SourceCode from \"./core/source-code\";\n// sequence\nimport FixerProcessor from \"./fixer/fixer-processor\";\n// parallel\nimport LinterProcessor from \"./linter/linter-processor\";\n// message process manager\nimport MessageProcessManager from \"./messages/MessageProcessManager\";\nimport filterIgnoredProcess from \"./messages/filter-ignored-process\";\nimport filterDuplicatedProcess from \"./messages/filter-duplicated-process\";\nimport filterSeverityProcess from \"./messages/filter-severity-process\";\nimport sortMessageProcess from \"./messages/sort-messages-process\";\n\n/**\n * @param {TextlintKernelPlugin[]} plugins\n * @param {string} ext\n * @returns {TextlintKernelPlugin|undefined} PluginConstructor\n */\nfunction findPluginWithExt(plugins = [], ext) {\n    const matchPlugins = plugins.filter((kernelPlugin) => {\n        const plugin = kernelPlugin.plugin;\n        // static availableExtensions() method\n        assert.ok(typeof plugin.Processor.availableExtensions === \"function\",\n            `Processor(${plugin.Processor.name} should have availableExtensions()`);\n        const extList = plugin.Processor.availableExtensions();\n        return extList.some(targetExt => targetExt === ext || (\".\" + targetExt) === ext);\n    });\n    if (matchPlugins.length === 0) {\n        return;\n    }\n    return matchPlugins[0];\n}\n/**\n * add fileName to trailing of error message\n * @param {string|undefined} fileName\n * @param {string} message\n * @returns {string}\n */\nfunction addingAtFileNameToError(fileName, message) {\n    if (!fileName) {\n        return message;\n    }\n    return `${message}\nat ${fileName}`;\n\n}\n\n/**\n *\n * Pass\n *\n * - config\n * - plugins\n * - rules\n * - filterRules\n * - messageProcessor\n *\n */\nexport class TextlintKernel {\n    /**\n     * TODO: THIS\n     * @param config\n     */\n    constructor(config = {}) {\n        // this.config often is undefined.\n        this.config = config;\n        // Initialize Message Processor\n        // Now, It it built-in process only\n        this.messageProcessManager = new MessageProcessManager();\n        // filter `shouldIgnore()` results\n        this.messageProcessManager.add(filterIgnoredProcess);\n        // filter duplicated messages\n        this.messageProcessManager.add(filterDuplicatedProcess);\n        // filter by severity\n        this.messageProcessManager.add(filterSeverityProcess(this.config));\n        this.messageProcessManager.add(sortMessageProcess);\n    }\n\n    /**\n     * lint text by registered rules.\n     * The result contains target filePath and error messages.\n     * @param {string} text\n     * @param {Object} options linting options\n     * @returns {Promise.<TextLintResult>}\n     */\n    lintText(text, options) {\n        const valid = ajv.validate(TextlintKernelOptionsSchema, options);\n        if (!valid) {\n            return Promise.reject(new Error(`options is invalid. Please check document.\nErrors: ${JSON.stringify(ajv.errors, null, 4)}\nActual: ${JSON.stringify(options, null, 4)}\n`));\n        }\n        const ext = options.ext;\n        const plugin = findPluginWithExt(options.plugins, ext);\n        assert(plugin !== undefined && plugin.plugin !== undefined, `Not found available plugin for ${ ext }`);\n        const Processor = plugin.plugin.Processor;\n        assert(Processor !== undefined, `This plugin has not Processor: ${plugin}`);\n        const processor = new Processor(this.config);\n        return this._parallelProcess({\n            processor, text, options\n        });\n    }\n\n    /**\n     * fix texts and return fix result object\n     * @param {string} text\n     * @param {Object} options lint options\n     * @returns {Promise.<TextLintFixResult>}\n     */\n    fixText(text, options) {\n        const valid = ajv.validate(TextlintKernelOptionsSchema, options);\n        if (!valid) {\n            return Promise.reject(new Error(`options is invalid. Please check document.\nErrors: ${JSON.stringify(ajv.errors, null, 4)}\nActual: ${JSON.stringify(options, null, 4)}\n`));\n        }\n        const ext = options.ext;\n        const plugin = findPluginWithExt(options.plugins, ext);\n        assert(plugin !== undefined, `Not found available plugin for ${ ext }`);\n        const Processor = plugin.plugin.Processor;\n        assert(Processor !== undefined, `This plugin has not Processor: ${plugin}`);\n        const processor = new Processor(this.config);\n        return this._sequenceProcess({\n            processor,\n            text,\n            options\n        });\n    }\n\n\n    /**\n     * process text in parallel for Rules and return {Promise.<TextLintResult>}\n     * In other word, parallel flow process.\n     * @param {*} processor\n     * @param {string} text\n     * @param {Object} options\n     * @returns {Promise.<TextLintResult>}\n     * @private\n     */\n    _parallelProcess({\n                         processor,\n                         text,\n                         options\n                     }) {\n        const { ext, filePath, rules, filterRules, configBaseDir } = options;\n        const { preProcess, postProcess } = processor.processor(ext);\n        assert(typeof preProcess === \"function\" && typeof postProcess === \"function\",\n            \"processor should implement {preProcess, postProcess}\");\n        const ast = preProcess(text, filePath);\n        const sourceCode = new SourceCode({\n            text,\n            ast,\n            ext,\n            filePath\n        });\n        const linterProcessor = new LinterProcessor(processor, this.messageProcessManager);\n        return linterProcessor.process({\n            config: this.config,\n            rules,\n            filterRules,\n            sourceCode,\n            configBaseDir\n        }).catch(error => {\n            error.message = addingAtFileNameToError(filePath, error.message);\n            return Promise.reject(error);\n        });\n    }\n\n    /**\n     * process text in series for Rules and return {Promise.<TextLintFixResult>}\n     * In other word, sequence flow process.\n     * @param {*} processor\n     * @param {string} text\n     * @param {TextlintKernelOptions} options\n     * @returns {Promise.<TextLintFixResult>}\n     * @private\n     */\n    _sequenceProcess({ processor, text, options }) {\n        const { ext, filePath, rules, filterRules, configBaseDir } = options;\n        assert(processor, `processor is not found for ${ext}`);\n        const { preProcess, postProcess } = processor.processor(ext);\n        assert(typeof preProcess === \"function\" && typeof postProcess === \"function\",\n            \"processor should implement {preProcess, postProcess}\");\n        const ast = preProcess(text, filePath);\n        const sourceCode = new SourceCode({\n            text,\n            ast,\n            ext,\n            filePath\n        });\n        const fixerProcessor = new FixerProcessor(processor, this.messageProcessManager);\n        return fixerProcessor.process({\n            config: this.config,\n            rules,\n            filterRules,\n            sourceCode,\n            configBaseDir\n        }).catch(error => {\n            error.message = addingAtFileNameToError(filePath, error.message);\n            return Promise.reject(error);\n        });\n    }\n}\n"]}