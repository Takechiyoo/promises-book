{"version":3,"sources":["../../src/linter/linter-processor.js"],"names":["LinterProcessor","processor","messageProcessManager","config","configBaseDir","rules","filterRules","sourceCode","Array","isArray","ext","preProcess","postProcess","task","process","then","result","messages","filePath","length"],"mappings":"AAAA;AACA;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,e;AACjB;;;;AAIA,6BAAYC,SAAZ,EAAuBC,qBAAvB,EAA8C;AAAA;;AAC1C,aAAKD,SAAL,GAAiBA,SAAjB;AACA,aAAKC,qBAAL,GAA6BA,qBAA7B;AACH;;AAED;;;;;;;;;;;;;sCAS6E;AAAA;;AAAA,gBAAnEC,MAAmE,QAAnEA,MAAmE;AAAA,gBAA3DC,aAA2D,QAA3DA,aAA2D;AAAA,kCAA5CC,KAA4C;AAAA,gBAA5CA,KAA4C,8BAApC,EAAoC;AAAA,wCAAhCC,WAAgC;AAAA,gBAAhCA,WAAgC,oCAAlB,EAAkB;AAAA,gBAAdC,UAAc,QAAdA,UAAc;;AACzE,kCAAOJ,UAAUK,MAAMC,OAAN,CAAcJ,KAAd,CAAV,IAAkCG,MAAMC,OAAN,CAAcH,WAAd,CAAlC,IAAgEC,UAAvE;;AADyE,uCAErC,KAAKN,SAAL,CAAeA,SAAf,CAAyBM,WAAWG,GAApC,CAFqC;AAAA,gBAEjEC,UAFiE,wBAEjEA,UAFiE;AAAA,gBAErDC,WAFqD,wBAErDA,WAFqD;;AAGzE,kCAAO,OAAOD,UAAP,KAAsB,UAAtB,IAAoC,OAAOC,WAAP,KAAuB,UAAlE,EACI,sDADJ;AAEA,gBAAMC,OAAO,yBAAe;AACxBV,8BADwB;AAExBE,4BAFwB;AAGxBC,wCAHwB;AAIxBC,sCAJwB;AAKxBH;AALwB,aAAf,CAAb;AAOA,mBAAO,qBAAWU,OAAX,CAAmBD,IAAnB,EAAyBE,IAAzB,CAA8B,oBAAY;AAC7C,oBAAMC,SAASJ,YAAYK,QAAZ,EAAsBV,WAAWW,QAAjC,CAAf;AACAF,uBAAOC,QAAP,GAAkB,MAAKf,qBAAL,CAA2BY,OAA3B,CAAmCE,OAAOC,QAA1C,CAAlB;AACA,oBAAID,OAAOE,QAAP,IAAmB,IAAvB,EAA6B;AACzBF,2BAAOE,QAAP,eAA4BX,WAAWG,GAAvC;AACH;AACD,sCAAOM,OAAOE,QAAP,IAAmBF,OAAOC,QAAP,CAAgBE,MAAhB,IAA0B,CAApD,EAAuD,mDAAvD;AACA,uBAAOH,MAAP;AACH,aARM,CAAP;AASH;;;;;;kBAxCgBhB,e","file":"linter-processor.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport assert from \"assert\";\nimport LinterTask from \"../task/linter-task\";\nimport TaskRunner from \"../task/task-runner\";\n\nexport default class LinterProcessor {\n    /**\n     * @param {Processor} processor\n     * @param {MessageProcessManager} messageProcessManager\n     */\n    constructor(processor, messageProcessManager) {\n        this.processor = processor;\n        this.messageProcessManager = messageProcessManager;\n    }\n\n    /**\n     * Run linter process\n     * @param {Config} config\n     * @param {string} [configBaseDir\n     * @param {TextlintKernelRule[]} [rules]\n     * @param {TextlintKernelFilterRule[]} [filterRules]\n     * @param {SourceCode} sourceCode\n     * @returns {Promise.<TextLintResult>}\n     */\n    process({ config, configBaseDir, rules = [], filterRules = [], sourceCode }) {\n        assert(config && Array.isArray(rules) && Array.isArray(filterRules) && sourceCode);\n        const { preProcess, postProcess } = this.processor.processor(sourceCode.ext);\n        assert(typeof preProcess === \"function\" && typeof postProcess === \"function\",\n            \"processor should implement {preProcess, postProcess}\");\n        const task = new LinterTask({\n            config,\n            rules,\n            filterRules,\n            sourceCode,\n            configBaseDir\n        });\n        return TaskRunner.process(task).then(messages => {\n            const result = postProcess(messages, sourceCode.filePath);\n            result.messages = this.messageProcessManager.process(result.messages);\n            if (result.filePath == null) {\n                result.filePath = `<Unkown${sourceCode.ext}>`;\n            }\n            assert(result.filePath && result.messages.length >= 0, \"postProcess should return { messages, filePath } \");\n            return result;\n        });\n    }\n}\n"]}