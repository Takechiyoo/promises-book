{"version":3,"sources":["../../src/task/linter-task.js"],"names":["debug","require","TextLintCoreTask","config","configBaseDir","rules","filterRules","sourceCode","_setupRules","startTraverser","textLintConfig","report","createReporter","ignoreReport","createIgnoreReporter","forEach","ruleId","rule","options","ruleContext","ruleOptions","ruleModule","tryToAddListenRule"],"mappings":"AAAA;AACA;;;;;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,2BAAjB,CAAd;;IACqBC,gB;;;AACjB;;;;;;;AAOA,oCAAuE;AAAA,YAAzDC,MAAyD,QAAzDA,MAAyD;AAAA,YAAjDC,aAAiD,QAAjDA,aAAiD;AAAA,YAAlCC,KAAkC,QAAlCA,KAAkC;AAAA,YAA3BC,WAA2B,QAA3BA,WAA2B;AAAA,YAAdC,UAAc,QAAdA,UAAc;;AAAA;;AAAA;;AAEnE,cAAKJ,MAAL,GAAcA,MAAd;AACA,cAAKC,aAAL,GAAqBA,aAArB;AACA,cAAKC,KAAL,GAAaA,KAAb;AACA,cAAKC,WAAL,GAAmBA,WAAnB;AACA,cAAKC,UAAL,GAAkBA,UAAlB;AACA,cAAKC,WAAL;AAPmE;AAQtE;;;;gCAEO;AACJ,iBAAKC,cAAL,CAAoB,KAAKF,UAAzB;AACH;;;sCAEa;AAAA;;AACV;AACA,gBAAMG,iBAAiB,KAAKP,MAA5B;AACA,gBAAMI,aAAa,KAAKA,UAAxB;AACA,gBAAMI,SAAS,KAAKC,cAAL,CAAoBL,UAApB,CAAf;AACA,gBAAMM,eAAe,KAAKC,oBAAL,CAA0BP,UAA1B,CAArB;AACA;AACA;AACA;AACAP,kBAAM,OAAN,EAAe,KAAKK,KAApB;AACA,iBAAKA,KAAL,CAAWU,OAAX,CAAmB,iBAA+B;AAAA,oBAA5BC,MAA4B,SAA5BA,MAA4B;AAAA,oBAApBC,IAAoB,SAApBA,IAAoB;AAAA,oBAAdC,OAAc,SAAdA,OAAc;;AAC9C,oBAAMC,cAAc,0BAAgB;AAChCH,kCADgC;AAEhCI,iCAAaF,OAFmB;AAGhCX,0CAHgC;AAIhCI,kCAJgC;AAKhCE,8CALgC;AAMhCH,kDANgC;AAOhCN,mCAAe,OAAKA;AAPY,iBAAhB,CAApB;AASA,oBAAMiB,aAAa,kCAAUJ,IAAV,CAAnB;AACA,uBAAKK,kBAAL,CAAwBD,UAAxB,EAAoCF,WAApC,EAAiDD,OAAjD;AACH,aAZD;AAaA;AACAlB,kBAAM,aAAN,EAAqB,KAAKM,WAA1B;AACA,iBAAKA,WAAL,CAAiBS,OAAjB,CAAyB,iBAA+B;AAAA,oBAA5BC,MAA4B,SAA5BA,MAA4B;AAAA,oBAApBC,IAAoB,SAApBA,IAAoB;AAAA,oBAAdC,OAAc,SAAdA,OAAc;;AACpD,oBAAMC,cAAc,gCAAsB;AACtCH,kCADsC;AAEtCI,iCAAaF,OAFyB;AAGtCX,0CAHsC;AAItCM,8CAJsC;AAKtCH;AALsC,iBAAtB,CAApB;AAOA;AACA,oBAAMW,aAAa,kCAAUJ,IAAV,CAAnB;AACA,uBAAKK,kBAAL,CAAwBD,UAAxB,EAAoCF,WAApC,EAAiDD,OAAjD;AACH,aAXD;AAYH;;;;;;kBA3DgBhB,gB","file":"linter-task.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport CoreTask from \"./textlint-core-task\";\nimport { getLinter, getFilter } from \"../core/rule-creator-helper\";\nimport RuleContext from \"../core/rule-context\";\nimport FilterRuleContext from \"../core/filter-rule-context\";\n\nconst debug = require(\"debug\")(\"textlint:TextLintCoreTask\");\nexport default class TextLintCoreTask extends CoreTask {\n    /**\n     * @param {Config} config\n     * @param {string} [configBaseDir]\n     * @param {TextlintKernelRule[]} rules rules and config set\n     * @param {TextlintKernelFilterRule[]} filterRules rules filter rules and config set\n     * @param {SourceCode} sourceCode\n     */\n    constructor({ config, configBaseDir, rules, filterRules, sourceCode }) {\n        super();\n        this.config = config;\n        this.configBaseDir = configBaseDir;\n        this.rules = rules;\n        this.filterRules = filterRules;\n        this.sourceCode = sourceCode;\n        this._setupRules();\n    }\n\n    start() {\n        this.startTraverser(this.sourceCode);\n    }\n\n    _setupRules() {\n        // rule\n        const textLintConfig = this.config;\n        const sourceCode = this.sourceCode;\n        const report = this.createReporter(sourceCode);\n        const ignoreReport = this.createIgnoreReporter(sourceCode);\n        // setup \"rules\" field\n        // filter duplicated rules for improving experience\n        // see https://github.com/textlint/textlint/issues/219\n        debug(\"rules\", this.rules);\n        this.rules.forEach(({ ruleId, rule, options }) => {\n            const ruleContext = new RuleContext({\n                ruleId,\n                ruleOptions: options,\n                sourceCode,\n                report,\n                ignoreReport,\n                textLintConfig,\n                configBaseDir: this.configBaseDir\n            });\n            const ruleModule = getLinter(rule);\n            this.tryToAddListenRule(ruleModule, ruleContext, options);\n        });\n        // setup \"filters\" field\n        debug(\"filterRules\", this.filterRules);\n        this.filterRules.forEach(({ ruleId, rule, options }) => {\n            const ruleContext = new FilterRuleContext({\n                ruleId,\n                ruleOptions: options,\n                sourceCode,\n                ignoreReport,\n                textLintConfig\n            });\n            // \"filters\" rule is the same with \"rules\"\n            const ruleModule = getFilter(rule);\n            this.tryToAddListenRule(ruleModule, ruleContext, options);\n        });\n    }\n}\n"]}