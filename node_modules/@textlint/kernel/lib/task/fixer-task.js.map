{"version":3,"sources":["../../src/task/fixer-task.js"],"names":["debug","require","TextLintCoreTask","config","configBaseDir","fixerRule","filterRules","sourceCode","_setupRules","startTraverser","textLintConfig","report","createReporter","ignoreReport","createIgnoreReporter","ruleContext","ruleId","ruleOptions","options","ruleModule","rule","tryToAddListenRule","forEach"],"mappings":"AAAA;AACA;;;;;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,2BAAjB,CAAd;;IACqBC,gB;;;AACjB;;;;;;;AAOA,oCAA2E;AAAA,YAA7DC,MAA6D,QAA7DA,MAA6D;AAAA,YAArDC,aAAqD,QAArDA,aAAqD;AAAA,YAAtCC,SAAsC,QAAtCA,SAAsC;AAAA,YAA3BC,WAA2B,QAA3BA,WAA2B;AAAA,YAAdC,UAAc,QAAdA,UAAc;;AAAA;;AAAA;;AAEvE,cAAKJ,MAAL,GAAcA,MAAd;AACA,cAAKC,aAAL,GAAqBA,aAArB;AACA,cAAKC,SAAL,GAAiBA,SAAjB;AACA,cAAKC,WAAL,GAAmBA,WAAnB;AACA,cAAKC,UAAL,GAAkBA,UAAlB;AACA,cAAKC,WAAL;AAPuE;AAQ1E;;;;gCAEO;AACJ,iBAAKC,cAAL,CAAoB,KAAKF,UAAzB;AACH;;;sCAEa;AAAA;;AACV;AACA,gBAAMG,iBAAiB,KAAKP,MAA5B;AACA,gBAAMI,aAAa,KAAKA,UAAxB;AACA,gBAAMI,SAAS,KAAKC,cAAL,CAAoBL,UAApB,CAAf;AACA,gBAAMM,eAAe,KAAKC,oBAAL,CAA0BP,UAA1B,CAArB;AACA;AACAP,kBAAM,WAAN,EAAmB,KAAKK,SAAxB;AACA,gBAAMU,cAAc,0BAAgB;AAChCC,wBAAQ,KAAKX,SAAL,CAAeW,MADS;AAEhCC,6BAAa,KAAKZ,SAAL,CAAea,OAFI;AAGhCX,sCAHgC;AAIhCI,8BAJgC;AAKhCE,0CALgC;AAMhCH,8CANgC;AAOhCN,+BAAe,KAAKA;AAPY,aAAhB,CAApB;AASA,gBAAMe,aAAa,iCAAS,KAAKd,SAAL,CAAee,IAAxB,CAAnB;AACA,iBAAKC,kBAAL,CAAwBF,UAAxB,EAAoCJ,WAApC,EAAiD,KAAKV,SAAL,CAAea,OAAhE;AACA;AACAlB,kBAAM,aAAN,EAAqB,KAAKM,WAA1B;AACA,iBAAKA,WAAL,CAAiBgB,OAAjB,CAAyB,iBAA+B;AAAA,oBAA5BN,MAA4B,SAA5BA,MAA4B;AAAA,oBAApBI,IAAoB,SAApBA,IAAoB;AAAA,oBAAdF,OAAc,SAAdA,OAAc;;AACpD,oBAAMH,cAAc,gCAAsB;AACtCC,kCADsC;AAEtCT,0CAFsC;AAGtCM,8CAHsC;AAItCH;AAJsC,iBAAtB,CAApB;AAMA;AACA,oBAAMS,aAAa,kCAAUC,IAAV,CAAnB;AACA,uBAAKC,kBAAL,CAAwBF,UAAxB,EAAoCJ,WAApC,EAAiDG,OAAjD;AACH,aAVD;AAWH;;;;;;kBAtDgBhB,gB","file":"fixer-task.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport CoreTask from \"./textlint-core-task\";\nimport { getFixer, getFilter } from \"../core/rule-creator-helper\";\nimport RuleContext from \"../core/rule-context\";\nimport FilterRuleContext from \"../core/filter-rule-context\";\n\nconst debug = require(\"debug\")(\"textlint:TextLintCoreTask\");\nexport default class TextLintCoreTask extends CoreTask {\n    /**\n     * @param {Config} config\n     * @param {string} [configBaseDir]\n     * @param {TextlintKernelRule} fixerRule rules has fixer\n     * @param {TextlintKernelFilterRule[]} filterRules filter rules and config set\n     * @param {SourceCode} sourceCode\n     */\n    constructor({ config, configBaseDir, fixerRule, filterRules, sourceCode }) {\n        super();\n        this.config = config;\n        this.configBaseDir = configBaseDir;\n        this.fixerRule = fixerRule;\n        this.filterRules = filterRules;\n        this.sourceCode = sourceCode;\n        this._setupRules();\n    }\n\n    start() {\n        this.startTraverser(this.sourceCode);\n    }\n\n    _setupRules() {\n        // rule\n        const textLintConfig = this.config;\n        const sourceCode = this.sourceCode;\n        const report = this.createReporter(sourceCode);\n        const ignoreReport = this.createIgnoreReporter(sourceCode);\n        // setup \"rules\" field by using a single fixerRule\n        debug(\"fixerRule\", this.fixerRule);\n        const ruleContext = new RuleContext({\n            ruleId: this.fixerRule.ruleId,\n            ruleOptions: this.fixerRule.options,\n            sourceCode,\n            report,\n            ignoreReport,\n            textLintConfig,\n            configBaseDir: this.configBaseDir\n        });\n        const ruleModule = getFixer(this.fixerRule.rule);\n        this.tryToAddListenRule(ruleModule, ruleContext, this.fixerRule.options);\n        // setup \"filters\" field\n        debug(\"filterRules\", this.filterRules);\n        this.filterRules.forEach(({ ruleId, rule, options }) => {\n            const ruleContext = new FilterRuleContext({\n                ruleId,\n                sourceCode,\n                ignoreReport,\n                textLintConfig\n            });\n            // \"filters\" rule is the same with \"rules\"\n            const ruleModule = getFilter(rule);\n            this.tryToAddListenRule(ruleModule, ruleContext, options);\n        });\n    }\n}\n"]}