{"version":3,"sources":["../../src/engine/textlint-module-loader.js"],"names":["EventEmitter","require","interopRequire","debug","isFile","TextLintModuleLoader","rule","filterRule","plugin","error","config","moduleResolver","constructor","rulesBaseDirectory","rulePaths","forEach","rulesDir","rules","Object","keys","entry","ruleName","emit","Event","loadRule","filterRules","loadFilterRule","presets","loadPreset","presetName","plugins","loadPlugin","pluginName","pkgPath","resolvePluginPackageName","PLUGIN_NAME_PREFIX","prefixMatch","RegExp","pluginNameWithoutPrefix","replace","hasOwnProperty","entities","createEntities","pluginEntry","RULE_NAME_PREFIX","presetRuleNameWithoutPrefix","warn","resolvePresetPackageName","preset","ruleCreator","ruleEntry","definedRuleName","resolveRulePackageName","FILTER_RULE_NAME_PREFIX","resolveFilterRulePackageName"],"mappings":"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","file":"textlint-module-loader.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst EventEmitter = require(\"events\");\nconst interopRequire = require(\"interop-require\");\nconst debug = require(\"debug\")(\"textlint:module-loader\");\nconst isFile = require(\"is-file\");\nimport {isPluginRuleKey} from \"../util/config-util\";\nimport {loadFromDir} from \"./rule-loader\";\nimport Logger from \"../util/logger\";\nimport TextLintModuleResolver from \"./textlint-module-resolver\";\nimport TextLintModuleMapper from \"./textlint-module-mapper\";\nexport default class TextLintModuleLoader extends EventEmitter {\n    static get Event() {\n        return {\n            rule: \"rule\",\n            filterRule: \"filterRule\",\n            plugin: \"plugin\",\n            error: \"error\"\n        };\n    }\n\n    constructor(config) {\n        super();\n        /**\n         * @type {Config} config is need for static prefix value\n         */\n        this.config = config;\n        /**\n         * @type {TextLintModuleResolver}\n         */\n        this.moduleResolver = new TextLintModuleResolver(this.config.constructor, this.config.rulesBaseDirectory);\n    }\n\n    /**\n     * set up lint rules using {@lint Config} object.\n     * The {@lint Config} object was created with initialized {@link TextLintEngine} (as-known Constructor).\n     * @param {Config} config the config is parsed object\n     */\n    loadFromConfig(config) {\n        debug(\"config %O\", config);\n        // --ruledir\n        if (config.rulePaths) {\n            // load in additional rules\n            config.rulePaths.forEach(rulesDir => {\n                debug(\"Loading rules from %o\", rulesDir);\n                const rules = loadFromDir(rulesDir);\n                Object.keys(rules).forEach(ruleName => {\n                    const entry = [ruleName, rules[ruleName]];\n                    this.emit(TextLintModuleLoader.Event.rule, entry);\n                });\n            });\n        }\n        // --rule\n        if (config.rules) {\n            // load in additional rules\n            config.rules.forEach(ruleName => {\n                this.loadRule(ruleName);\n            });\n        }\n        // TODO: --filter\n        if (config.filterRules) {\n            // load in additional filterRules\n            config.filterRules.forEach(ruleName => {\n                this.loadFilterRule(ruleName);\n            });\n        }\n        // --preset\n        if (config.presets) {\n            config.presets.forEach(presetName => {\n                this.loadPreset(presetName);\n            });\n        }\n        // --plugin\n        if (config.plugins) {\n            // load in additional rules from plugin\n            config.plugins.forEach(pluginName => {\n                this.loadPlugin(pluginName);\n            });\n        }\n    }\n\n    /**\n     * load rule from plugin name.\n     * plugin module has `rules` object and define rule with plugin prefix.\n     * @param {string} pluginName\n     */\n    loadPlugin(pluginName) {\n        const pkgPath = this.moduleResolver.resolvePluginPackageName(pluginName);\n        debug(\"Loading rules from plugin: %s\", pkgPath);\n        const plugin = interopRequire(pkgPath);\n        const PLUGIN_NAME_PREFIX = this.config.constructor.PLUGIN_NAME_PREFIX;\n        const prefixMatch = new RegExp(\"^\" + PLUGIN_NAME_PREFIX);\n        const pluginNameWithoutPrefix = pluginName.replace(prefixMatch, \"\");\n        // Processor plugin doesn't define rules\n        if (plugin.hasOwnProperty(\"rules\")) {\n            const entities = TextLintModuleMapper.createEntities(plugin.rules, pluginNameWithoutPrefix);\n            entities.forEach(entry => {\n                this.emit(TextLintModuleLoader.Event.rule, entry);\n            });\n        }\n        // register plugin.Processor\n        // TODO: https://github.com/textlint/textlint/issues/291\n        // Should assert it\n        if (plugin.hasOwnProperty(\"Processor\")) {\n            const pluginEntry = [pluginNameWithoutPrefix, plugin];\n            this.emit(TextLintModuleLoader.Event.plugin, pluginEntry);\n        }\n    }\n\n    loadPreset(presetName) {\n        /*\n         Caution: Rules of preset are defined as following.\n             {\n                \"rules\": {\n                    \"preset-gizmo\": {\n                        \"ruleA\": false\n\n                }\n            }\n\n        It mean that \"ruleA\" is defined as \"preset-gizmo/ruleA\"\n\n         */\n        const RULE_NAME_PREFIX = this.config.constructor.RULE_NAME_PREFIX;\n        // Strip **rule** prefix\n        // textlint-rule-preset-gizmo -> preset-gizmo\n        const prefixMatch = new RegExp(\"^\" + RULE_NAME_PREFIX);\n        const presetRuleNameWithoutPrefix = presetName.replace(prefixMatch, \"\");\n        // ignore plugin's rule\n        if (isPluginRuleKey(presetRuleNameWithoutPrefix)) {\n            Logger.warn(`${presetRuleNameWithoutPrefix} is Plugin's rule. This is unknown case, please report issue.`);\n            return;\n        }\n\n        const pkgPath = this.moduleResolver.resolvePresetPackageName(presetName);\n        debug(\"Loading rules from preset: %s\", pkgPath);\n        const preset = interopRequire(pkgPath);\n        const entities = TextLintModuleMapper.createEntities(preset.rules, presetRuleNameWithoutPrefix);\n        entities.forEach(entry => {\n            this.emit(TextLintModuleLoader.Event.rule, entry);\n        });\n    }\n\n    /**\n     * load rule file with `ruleName` and define rule.\n     * if rule is not found, then throw ReferenceError.\n     * if already rule is loaded, do not anything.\n     * @param {string} ruleName\n     */\n    loadRule(ruleName) {\n        /*\n           Task\n             - check already define\n             - resolve package name\n             - load package\n             - emit rule\n        */\n        // ruleName is filePath\n        if (isFile(ruleName)) {\n            const ruleCreator = interopRequire(ruleName);\n            const ruleEntry = [ruleName, ruleCreator];\n            this.emit(TextLintModuleLoader.Event.rule, ruleEntry);\n            return;\n        }\n        // ignore already defined rule\n        // ignore rules from rulePaths because avoid ReferenceError is that try to require.\n        const RULE_NAME_PREFIX = this.config.constructor.RULE_NAME_PREFIX;\n        const prefixMatch = new RegExp(\"^\" + RULE_NAME_PREFIX);\n        const definedRuleName = ruleName.replace(prefixMatch, \"\");\n        // ignore plugin's rule\n        if (isPluginRuleKey(definedRuleName)) {\n            Logger.warn(`${definedRuleName} is Plugin's rule. This is unknown case, please report issue.`);\n            return;\n        }\n        const pkgPath = this.moduleResolver.resolveRulePackageName(ruleName);\n        debug(\"Loading rules from %s\", pkgPath);\n        const ruleCreator = interopRequire(pkgPath);\n        const ruleEntry = [definedRuleName, ruleCreator];\n        this.emit(TextLintModuleLoader.Event.rule, ruleEntry);\n    }\n\n    /**\n     * load filter rule file with `ruleName` and define rule.\n     * if rule is not found, then throw ReferenceError.\n     * if already rule is loaded, do not anything.\n     * @param {string} ruleName\n     */\n    loadFilterRule(ruleName) {\n        /*\n           Task\n             - check already define\n             - resolve package name\n             - load package\n             - emit rule\n        */\n        // ignore already defined rule\n        // ignore rules from rulePaths because avoid ReferenceError is that try to require.\n        if (isFile(ruleName)) {\n            const ruleCreator = interopRequire(ruleName);\n            const ruleEntry = [ruleName, ruleCreator];\n            this.emit(TextLintModuleLoader.Event.filterRule, ruleEntry);\n            return;\n        }\n        const RULE_NAME_PREFIX = this.config.constructor.FILTER_RULE_NAME_PREFIX;\n        const prefixMatch = new RegExp(\"^\" + RULE_NAME_PREFIX);\n        const definedRuleName = ruleName.replace(prefixMatch, \"\");\n        // ignore plugin's rule\n        if (isPluginRuleKey(definedRuleName)) {\n            Logger.warn(`${definedRuleName} is Plugin's rule. This is unknown case, please report issue.`);\n            return;\n        }\n        const pkgPath = this.moduleResolver.resolveFilterRulePackageName(ruleName);\n        debug(\"Loading filter rules from %s\", pkgPath);\n        const ruleCreator = interopRequire(pkgPath);\n        const ruleEntry = [definedRuleName, ruleCreator];\n        this.emit(TextLintModuleLoader.Event.filterRule, ruleEntry);\n    }\n}\n\n"]}