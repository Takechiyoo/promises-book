{"version":3,"sources":["../../src/config/config.js"],"names":["objectAssign","require","md5","fs","assert","pkg","concat","path","convertRulesConfigToFlatPath","rulesConfig","filteredConfig","Object","keys","forEach","key","defaultOptions","freeze","rules","disabledRules","filterRules","disabledFilterRules","filterRulesConfig","presets","plugins","rulesBaseDirectory","undefined","configFile","rulePaths","extensions","formatterName","quiet","color","cache","cacheLocation","resolve","process","cwd","Config","version","toString","JSON","stringify","toJSON","cliOptions","options","ext","rule","preset","plugin","config","rulesdir","format","initWithAutoLoading","moduleResolver","loadedResult","configFileName","CONFIG_FILE_NAME","configFileRawOptions","configFilePath","filePath","configRulesObject","configFilterRulesObject","filters","configPresets","configFilePlugins","configFileRulesConfig","configFileFilterRulesConfig","optionRules","optionFilterRules","optionDisbaledRules","optionDisbaledFilterRules","optionRulesConfig","optionFilterRulesConfig","optionPlugins","optionPresets","available","disable","mergedOptions","isAbsolute","constructor","pluginRulesConfig","presetRulesConfig","additionalExtensions","_assertCacheLocation","locationPath","fileStats","lstatSync","ex","isDirectory","r","create","hasOwnProperty","value","module","exports"],"mappings":"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","file":"config.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst objectAssign = require(\"object-assign\");\nconst md5 = require(\"md5\");\nconst fs = require(\"fs\");\nconst assert = require(\"assert\");\nconst pkg = require(\"../../package.json\");\nconst concat = require(\"unique-concat\");\nconst path = require(\"path\");\nimport loadConfig from \"./config-loader\";\nimport { isPresetRuleKey } from \"../util/config-util\";\nimport { mapRulesConfig } from \"./preset-loader\";\nimport {\n    loadRulesConfig as loadRulesConfigFromPlugins,\n    loadAvailableExtensions\n} from \"./plugin-loader\";\nimport loadRulesConfigFromPresets from \"./preset-loader\";\nimport TextLintModuleResolver from \"../engine/textlint-module-resolver\";\nimport separateAvailableOrDisable from \"./separate-by-config-option\";\n\n/**\n * Convert config of preset to rulesConfig flat path format.\n *\n * e.g.)\n * {\n *  \"preset-a\" : { \"key\": \"value\"}\n * }\n * => {\"preset-a/key\": \"value\"}\n *\n * @param rulesConfig\n * @returns {{string: string}}\n */\nfunction convertRulesConfigToFlatPath(rulesConfig) {\n    if (!rulesConfig) {\n        return {};\n    }\n    const filteredConfig = {};\n    Object.keys(rulesConfig).forEach(key => {\n        if (isPresetRuleKey(key)) {\n            // <preset>/<rule>\n            objectAssign(filteredConfig, mapRulesConfig(rulesConfig[key], key));\n            return;\n        }\n        filteredConfig[key] = rulesConfig[key];\n    });\n    return filteredConfig;\n}\n/**\n * @type {TextLintConfig}\n */\nconst defaultOptions = Object.freeze({\n    // rule package names\n    rules: [],\n    // disabled rule package names\n    // always should start with empty\n    disabledRules: [],\n    // rules config object\n    rulesConfig: {},\n    // filter rule package names\n    filterRules: [],\n    disabledFilterRules: [],\n    // rules config object\n    filterRulesConfig: {},\n    // preset package names\n    // e.g.) [\"preset-foo\"]\n    presets: [],\n    // plugin package names\n    plugins: [],\n    // base directory for loading {rule, config, plugin} modules\n    rulesBaseDirectory: undefined,\n    // \".textlint\" file path\n    configFile: undefined,\n    // rule directories\n    rulePaths: [],\n    // available extensions\n    // if set the option, should filter by extension.\n    extensions: [],\n    // formatter file name\n    // e.g.) stylish.js => set \"stylish\"\n    // NOTE: default formatter is defined in Engine,\n    // because There is difference between TextLintEngine and TextFixEngine.\n    formatterName: undefined,\n    // --quiet\n    quiet: false,\n    // --no-color\n    color: true,\n    // --cache : enable or disable\n    cache: false,\n    // --cache-location: cache file path\n    cacheLocation: path.resolve(process.cwd(), \".textlintcache\")\n});\n\n// Priority: CLI > Code options > config file\nclass Config {\n    /**\n     * @return {string} rc config filename\n     * it's name use as `.<name>rc`\n     */\n    static get CONFIG_FILE_NAME() {\n        return \"textlint\";\n    }\n\n    /**\n     * @return {string} config package prefix\n     */\n    static get CONFIG_PACKAGE_PREFIX() {\n        return \"textlint-config-\";\n    }\n\n    /**\n     * @return {string} rule package's name prefix\n     */\n    static get RULE_NAME_PREFIX() {\n        return \"textlint-rule-\";\n    }\n\n    /**\n     * @return {string} filter rule package's name prefix\n     */\n    static get FILTER_RULE_NAME_PREFIX() {\n        return \"textlint-filter-rule-\";\n    }\n\n    /**\n     * @return {string} rule preset package's name prefix\n     */\n    static get RULE_PRESET_NAME_PREFIX() {\n        return \"textlint-rule-preset-\";\n    }\n\n    /**\n     * @return {string} plugins package's name prefix\n     */\n    static get PLUGIN_NAME_PREFIX() {\n        return \"textlint-plugin-\";\n    }\n\n    /**\n     * Create config object form command line options\n     * See options.js\n     * @param {object} cliOptions the options is command line option object. @see options.js\n     * @returns {Config}\n     */\n    static initWithCLIOptions(cliOptions) {\n        const options = {};\n        options.extensions = cliOptions.ext ? cliOptions.ext : defaultOptions.extensions;\n        options.rules = cliOptions.rule ? cliOptions.rule : defaultOptions.rules;\n        // TODO: CLI --filter <rule>?\n        options.filterRules = defaultOptions.filterRules;\n        options.disabledFilterRules = defaultOptions.disabledFilterRules;\n        // TODO: CLI --disable <rule>?\n        options.disabledRules = defaultOptions.disabledRules;\n        options.presets = cliOptions.preset ? cliOptions.preset : defaultOptions.presets;\n        options.plugins = cliOptions.plugin ? cliOptions.plugin : defaultOptions.plugins;\n        options.configFile = cliOptions.config ? cliOptions.config : defaultOptions.configFile;\n        options.rulePaths = cliOptions.rulesdir ? cliOptions.rulesdir : defaultOptions.rulePaths;\n        options.formatterName = cliOptions.format ? cliOptions.format : defaultOptions.formatterName;\n        options.quiet = cliOptions.quiet !== undefined ? cliOptions.quiet : defaultOptions.quiet;\n        options.color = cliOptions.color !== undefined ? cliOptions.color : defaultOptions.color;\n        // --cache\n        options.cache = cliOptions.cache !== undefined ? cliOptions.cache : defaultOptions.cache;\n        // --cache-location=\"path/to/file\"\n        options.cacheLocation = cliOptions.cacheLocation !== undefined\n            ? path.resolve(process.cwd(), cliOptions.cacheLocation)\n            : defaultOptions.cacheLocation;\n        return this.initWithAutoLoading(options);\n    }\n\n    /* eslint-disable complexity */\n\n    // load config and merge options.\n    static initWithAutoLoading(options = {}) {\n        // Base directory\n        const rulesBaseDirectory = options.rulesBaseDirectory\n            ? options.rulesBaseDirectory\n            : defaultOptions.rulesBaseDirectory;\n        // Create resolver\n        const moduleResolver = new TextLintModuleResolver(this, rulesBaseDirectory);\n        // => ConfigFile\n        // configFile is optional\n        // => load .textlintrc\n        const loadedResult = loadConfig(options.configFile, {\n            moduleResolver,\n            configFileName: this.CONFIG_FILE_NAME\n        });\n        const configFileRawOptions = loadedResult.config;\n        const configFilePath = loadedResult.filePath;\n        // \"rules\" field is here!\n        const configRulesObject = separateAvailableOrDisable(configFileRawOptions.rules);\n        // \"filters\" field is here!\n        const configFilterRulesObject = separateAvailableOrDisable(configFileRawOptions.filters);\n        const configPresets = configRulesObject.presets;\n        const configFilePlugins = configFileRawOptions.plugins || [];\n        const configFileRulesConfig = convertRulesConfigToFlatPath(configFileRawOptions.rules);\n        const configFileFilterRulesConfig = convertRulesConfigToFlatPath(configFileRawOptions.filters);\n        // => Options\n        const optionRules = options.rules || [];\n        const optionFilterRules = options.filterRules || [];\n        const optionDisbaledRules = options.disabledRules || [];\n        const optionDisbaledFilterRules = options.disabledFilterRules || [];\n        const optionRulesConfig = options.rulesConfig || {};\n        const optionFilterRulesConfig = options.filterRulesConfig || {};\n        const optionPlugins = options.plugins || [];\n        const optionPresets = options.presets || [];\n        // => Merge options and configFileOptions\n        // Priority options > configFile\n        const rules = concat(optionRules, configRulesObject.available);\n        const disabledRules = concat(optionDisbaledRules, configRulesObject.disable);\n        const filterRules = concat(optionFilterRules, configFilterRulesObject.available);\n        const disabledFilterRules = concat(optionDisbaledFilterRules, configFilterRulesObject.disable);\n        const rulesConfig = objectAssign({}, configFileRulesConfig, optionRulesConfig);\n        const filterRulesConfig = objectAssign({}, configFileFilterRulesConfig, optionFilterRulesConfig);\n        const plugins = concat(optionPlugins, configFilePlugins);\n        const presets = concat(optionPresets, configPresets);\n        const mergedOptions = objectAssign({}, options, {\n            rules,\n            disabledRules,\n            rulesConfig,\n            filterRules,\n            disabledFilterRules,\n            filterRulesConfig,\n            plugins,\n            presets,\n            configFile: configFilePath\n        });\n        return new this(mergedOptions);\n    }\n\n\n    /**\n     * Return hash string of the config and textlint version\n     * @returns {string}\n     */\n    get hash() {\n        const version = pkg.version;\n        const toString = JSON.stringify(this.toJSON());\n        return md5(`${version}-${toString}`);\n    }\n\n    /**\n     * initialize with options.\n     * @param {TextLintConfig} options the option object is defined as TextLintConfig.\n     * @returns {Config}\n     * @constructor\n     */\n    constructor(options = {}) {\n        /**\n         * @type {string|undefined} absolute path to .textlintrc file.\n         * - If using .textlintrc, return path to .textlintrc\n         * - If using npm config module, return path to main file of the module\n         * - If not using config file, return undefined\n         */\n        this.configFile = options.configFile;\n        if (this.configFile) {\n            assert(path.isAbsolute(this.configFile), `configFile should be absolute path: ${this.configFile}`);\n        }\n        this.rulesBaseDirectory = options.rulesBaseDirectory\n            ? options.rulesBaseDirectory\n            : defaultOptions.rulesBaseDirectory;\n        // rule names that are defined in ,textlintrc\n        const moduleResolver = new TextLintModuleResolver(this.constructor, this.rulesBaseDirectory);\n        /**\n         * @type {string[]} rule key list\n         * but, plugins's rules are not contained in `rules`\n         * plugins's rule are loaded in TextLintEngine\n         */\n        this.rules = options.rules ? options.rules : defaultOptions.rules;\n        /**\n         * @type {string[]} rule key list\n         * These rule is set `false` to options\n         */\n        this.disabledRules = options.disabledRules ? options.disabledRules : defaultOptions.disabledRules;\n        /**\n         * @type {string[]} filter rule key list\n         */\n        this.filterRules = options.filterRules ? options.filterRules : defaultOptions.filterRules;\n        /**\n         * @type {string[]} rule key list\n         * These rule is set `false` to options\n         */\n        this.disabledFilterRules = options.disabledFilterRules ? options.disabledFilterRules\n            : defaultOptions.disabledFilterRules;\n        /**\n         * @type {string[]} preset key list\n         */\n        this.presets = options.presets ? options.presets : defaultOptions.presets;\n        // => load plugins\n        // this.rules has not contain plugin rules\n        // =====================\n        this.plugins = options.plugins ? options.plugins : defaultOptions.plugins;\n        // rulesConfig\n        const pluginRulesConfig = loadRulesConfigFromPlugins(this.plugins, moduleResolver);\n        const presetRulesConfig = loadRulesConfigFromPresets(this.presets, moduleResolver);\n        this.rulesConfig = objectAssign({}, presetRulesConfig, pluginRulesConfig, options.rulesConfig);\n\n        // filterRulesConfig\n        this.filterRulesConfig = options.filterRulesConfig || defaultOptions.filterRulesConfig;\n        /**\n         * @type {string[]}\n         */\n        this.extensions = options.extensions ? options.extensions : defaultOptions.extensions;\n        // additional availableExtensions from plugin\n        const additionalExtensions = loadAvailableExtensions(this.plugins, moduleResolver);\n        this.extensions = this.extensions.concat(additionalExtensions);\n        /**\n         * @type {string[]}\n         */\n        this.rulePaths = options.rulePaths ? options.rulePaths : defaultOptions.rulePaths;\n        /**\n         * @type {string}\n         */\n        this.formatterName = options.formatterName ? options.formatterName : defaultOptions.formatterName;\n        /**\n         * @type {boolean}\n         */\n        this.quiet = options.quiet !== undefined ? options.quiet : defaultOptions.quiet;\n        /**\n         * @type {boolean}\n         */\n        this.color = options.color !== undefined ? options.color : defaultOptions.color;\n        /**\n         * @type {boolean}\n         */\n        this.cache = options.cache !== undefined ? options.cache : defaultOptions.cache;\n        /**\n         * @type {string}\n         */\n        this.cacheLocation = options.cacheLocation !== undefined ? options.cacheLocation : defaultOptions.cacheLocation;\n        this._assertCacheLocation(this.cacheLocation);\n    }\n\n\n    _assertCacheLocation(locationPath) {\n        let fileStats;\n        try {\n            fileStats = fs.lstatSync(locationPath);\n        } catch (ex) {\n            fileStats = null;\n        }\n        if (!fileStats) {\n            return;\n        }\n        // TODO: --cache-location not supported directory\n        // We should defined what is default name.\n        assert(!fileStats.isDirectory(), \"--cache-location doesn't support directory\");\n    }\n\n    /* eslint-enable complexity */\n\n    toJSON() {\n        const r = Object.create(null);\n        Object.keys(this).forEach(key => {\n            if (!this.hasOwnProperty(key)) {\n                return;\n            }\n            const value = this[key];\n            if (value == null) {\n                return;\n            }\n            r[key] = typeof value.toJSON !== \"undefined\" ? value.toJSON() : value;\n        });\n        return r;\n    }\n}\n\nmodule.exports = Config;\n"]}