"use strict";
// LICENSE : MIT

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var assert = require("assert");
var getPlugins = function getPlugins(rawPluginObject) {
    return Object.keys(rawPluginObject).map(function (key) {
        return rawPluginObject[key];
    });
};
/**
 * Plugin Creator
 */

var PluginCreatorSet = function () {
    /**
     * @param {Object} [pluginObject]
     * @constructor
     */
    function PluginCreatorSet() {
        var pluginObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, PluginCreatorSet);

        this.rawPlugins = pluginObject;
        /**
         * available rule object
         * @type {Object}
         */
        this.plugins = getPlugins(this.rawPlugins);
        /**
         * rule key names
         * @type {Array}
         */
        this.pluginNames = Object.keys(this.rawPlugins);
    }

    _createClass(PluginCreatorSet, [{
        key: "toKernelPluginsFormat",


        /**
         * Convert this to TextlintKernel rules format
         * @returns {Array}
         */
        value: function toKernelPluginsFormat() {
            var _this = this;

            return this.pluginNames.map(function (pluginName) {
                return {
                    pluginId: pluginName,
                    plugin: _this.rawPlugins[pluginName]
                };
            });
        }
    }, {
        key: "availableExtensions",
        get: function get() {
            return this.plugins.reduce(function (extensions, plugin) {
                // static availableExtensions() method
                assert.ok(typeof plugin.Processor.availableExtensions === "function", "Processor(" + plugin.Processor.name + " should have availableExtensions()");
                var extList = plugin.Processor.availableExtensions();
                return extensions.concat(extList);
            }, []);
        }
    }]);

    return PluginCreatorSet;
}();

exports.default = PluginCreatorSet;
module.exports = exports["default"];
//# sourceMappingURL=plugin-creator-set.js.map