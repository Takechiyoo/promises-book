{"version":3,"sources":["../../src/core/rule-creator-set.js"],"names":["deepEqual","require","MapLike","filterByAvailable","rules","rulesConfig","resultRules","Object","create","keys","forEach","ruleCreator","key","ruleConfig","RuleCreatorSet","rawRulesObject","rawRulesConfigObject","ruleNames","_normalizeRulesConfig","withoutDuplicated","map","ruleId","ruleName","rule","options","newRawRules","newRawRulesConfig","addedRuleMap","savedConfigList","has","get","hasSameConfig","some","savedConfig","strict","push","set","clear","handler","filter","mapHandler","getFixerNames","defaultRuleConfigValue","undefined"],"mappings":"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","file":"rule-creator-set.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst deepEqual = require(\"deep-equal\");\nconst MapLike = require(\"map-like\");\nimport { assertRuleShape, hasFixer } from \"./rule-creator-helper\";\n\nconst filterByAvailable = (rules, rulesConfig) => {\n    const resultRules = Object.create(null);\n    Object.keys(rules).forEach(key => {\n        const ruleCreator = rules[key];\n        assertRuleShape(ruleCreator, key);\n        // \"rule-name\" : false => disable\n        const ruleConfig = rulesConfig && rulesConfig[key];\n        if (ruleConfig !== false) {\n            resultRules[key] = rules[key];\n        }\n    });\n    return resultRules;\n};\n\n/**\n * Manage RuleCreator*s* object and RuleOption*s*\n */\nexport default class RuleCreatorSet {\n    /**\n     * @param {Object} [rules]\n     * @param {Object} [rulesConfig]\n     * @constructor\n     */\n    constructor(rules = {}, rulesConfig = {}) {\n        this.rawRulesObject = rules;\n        this.rawRulesConfigObject = rulesConfig;\n        /**\n         * available rule object\n         * @type {Object}\n         */\n        this.rules = filterByAvailable(this.rawRulesObject, this.rawRulesConfigObject);\n        /**\n         * rule key names\n         * @type {Array}\n         */\n        this.ruleNames = Object.keys(this.rules);\n        /**\n         * rules Config object\n         * @type {Object}\n         */\n        this.rulesConfig = this._normalizeRulesConfig(this.ruleNames, this.rawRulesConfigObject);\n    }\n\n    /**\n     * Convert this to TextlintKernel rules format\n     * @returns {Array}\n     */\n    toKernelRulesFormat() {\n        return this.withoutDuplicated().ruleNames.map(ruleName => {\n            return {\n                ruleId: ruleName,\n                rule: this.rules[ruleName],\n                options: this.rulesConfig[ruleName]\n            };\n        });\n    }\n\n    /**\n     * filter duplicated rules and rulesConfig and return new RuleCreatorSet.\n     * @return {RuleCreatorSet}\n     */\n    withoutDuplicated() {\n        const newRawRules = {};\n        const newRawRulesConfig = {};\n        // for index\n        const addedRuleMap = new MapLike();\n        // if already contain same ruleModule and ruleConfig value\n        // Fill following condition, remove it\n        // 1. same ruleModule\n        // 2. same ruleConfig\n        this.ruleNames.forEach(ruleName => {\n            const rule = this.rules[ruleName];\n            const ruleConfig = this.rulesConfig[ruleName];\n            const savedConfigList = addedRuleMap.has(rule) ? addedRuleMap.get(rule) : [];\n            // same ruleCreator and ruleConfig\n            const hasSameConfig = savedConfigList.some(savedConfig => {\n                return deepEqual(savedConfig, ruleConfig, { strict: true });\n            });\n            if (hasSameConfig) {\n                return false;\n            }\n            newRawRules[ruleName] = rule;\n            newRawRulesConfig[ruleName] = ruleConfig;\n            // saved\n            savedConfigList.push(ruleConfig);\n            addedRuleMap.set(rule, savedConfigList);\n        });\n        addedRuleMap.clear();\n        return new RuleCreatorSet(newRawRules, newRawRulesConfig);\n    }\n\n    /**\n     * forEach method\n     * @example\n     *  ruleCreatorSet.forEach(({ruleId, rule, ruleConfig}) => {\n     *      // \n     *  });\n     * @param {function({ ruleId: string, rule: Function, ruleConfig: Object|boolean})} handler\n     */\n    forEach(handler) {\n        return this.ruleNames.forEach(ruleName => {\n            return handler({\n                ruleId: ruleName,\n                rule: this.rules[ruleName],\n                ruleConfig: this.rulesConfig[ruleName]\n            });\n        });\n    }\n\n    getFixerNames() {\n        return this.ruleNames.filter(ruleName => {\n            return hasFixer(this.rules[ruleName]);\n        });\n    }\n\n    mapFixer(mapHandler) {\n        return this.getFixerNames().map(ruleName => {\n            const rules = { [ruleName]: this.rules[ruleName] };\n            const rulesConfig = { [ruleName]: this.rulesConfig[ruleName] };\n            return mapHandler(new RuleCreatorSet(rules, rulesConfig));\n        });\n    }\n\n    /**\n     * normalize `rawRulesConfigObject`.\n     * if `rawRulesConfigObject` has not the rule, create `{ ruleName: true }` by default\n     * @param {string[]} ruleNames\n     * @param {Object} rawRulesConfigObject\n     * @private\n     */\n    _normalizeRulesConfig(ruleNames, rawRulesConfigObject) {\n        const rulesConfig = {};\n        // default: { ruleName: true }\n        const defaultRuleConfigValue = true;\n        ruleNames.forEach(ruleName => {\n            if (rawRulesConfigObject[ruleName] === undefined) {\n                rulesConfig[ruleName] = defaultRuleConfigValue;\n            } else {\n                rulesConfig[ruleName] = rawRulesConfigObject[ruleName];\n            }\n        });\n        return rulesConfig;\n    }\n}\n"]}