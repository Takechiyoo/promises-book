{"version":3,"sources":["../../src/core/plugin-creator-set.js"],"names":["assert","require","getPlugins","rawPluginObject","Object","keys","map","key","PluginCreatorSet","pluginObject","rawPlugins","plugins","pluginNames","pluginId","pluginName","plugin","reduce","extensions","ok","Processor","availableExtensions","name","extList","concat"],"mappings":"AAAA;AACA;;;;;;;;;;AACA,IAAMA,SAASC,QAAQ,QAAR,CAAf;AACA,IAAMC,aAAa,SAAbA,UAAa,CAACC,eAAD,EAAqB;AACpC,WAAOC,OAAOC,IAAP,CAAYF,eAAZ,EAA6BG,GAA7B,CAAiC,eAAO;AAC3C,eAAOH,gBAAgBI,GAAhB,CAAP;AACH,KAFM,CAAP;AAGH,CAJD;AAKA;;;;IAGqBC,gB;AACjB;;;;AAIA,gCAA+B;AAAA,YAAnBC,YAAmB,uEAAJ,EAAI;;AAAA;;AAC3B,aAAKC,UAAL,GAAkBD,YAAlB;AACA;;;;AAIA,aAAKE,OAAL,GAAeT,WAAW,KAAKQ,UAAhB,CAAf;AACA;;;;AAIA,aAAKE,WAAL,GAAmBR,OAAOC,IAAP,CAAY,KAAKK,UAAjB,CAAnB;AACH;;;;;;AAYD;;;;gDAIwB;AAAA;;AACpB,mBAAO,KAAKE,WAAL,CAAiBN,GAAjB,CAAqB,sBAAc;AACtC,uBAAO;AACHO,8BAAUC,UADP;AAEHC,4BAAQ,MAAKL,UAAL,CAAgBI,UAAhB;AAFL,iBAAP;AAIH,aALM,CAAP;AAMH;;;4BArByB;AACtB,mBAAO,KAAKH,OAAL,CAAaK,MAAb,CAAoB,UAACC,UAAD,EAAaF,MAAb,EAAwB;AAC/C;AACAf,uBAAOkB,EAAP,CAAU,OAAOH,OAAOI,SAAP,CAAiBC,mBAAxB,KAAgD,UAA1D,iBACiBL,OAAOI,SAAP,CAAiBE,IADlC;AAEA,oBAAMC,UAAUP,OAAOI,SAAP,CAAiBC,mBAAjB,EAAhB;AACA,uBAAOH,WAAWM,MAAX,CAAkBD,OAAlB,CAAP;AACH,aANM,EAMJ,EANI,CAAP;AAOH;;;;;;kBA3BgBd,gB","file":"plugin-creator-set.js","sourcesContent":["\"use strict\";\n// LICENSE : MIT\nconst assert = require(\"assert\");\nconst getPlugins = (rawPluginObject) => {\n    return Object.keys(rawPluginObject).map(key => {\n        return rawPluginObject[key];\n    });\n};\n/**\n * Plugin Creator\n */\nexport default class PluginCreatorSet {\n    /**\n     * @param {Object} [pluginObject]\n     * @constructor\n     */\n    constructor(pluginObject = {}) {\n        this.rawPlugins = pluginObject;\n        /**\n         * available rule object\n         * @type {Object}\n         */\n        this.plugins = getPlugins(this.rawPlugins);\n        /**\n         * rule key names\n         * @type {Array}\n         */\n        this.pluginNames = Object.keys(this.rawPlugins);\n    }\n\n    get availableExtensions() {\n        return this.plugins.reduce((extensions, plugin) => {\n            // static availableExtensions() method\n            assert.ok(typeof plugin.Processor.availableExtensions === \"function\",\n                `Processor(${plugin.Processor.name} should have availableExtensions()`);\n            const extList = plugin.Processor.availableExtensions();\n            return extensions.concat(extList);\n        }, []);\n    }\n\n    /**\n     * Convert this to TextlintKernel rules format\n     * @returns {Array}\n     */\n    toKernelPluginsFormat() {\n        return this.pluginNames.map(pluginName => {\n            return {\n                pluginId: pluginName,\n                plugin: this.rawPlugins[pluginName]\n            };\n        });\n    }\n\n}\n"]}