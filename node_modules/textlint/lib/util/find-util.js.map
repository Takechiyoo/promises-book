{"version":3,"sources":["../../src/util/find-util.js"],"names":["pathsToGlobPatterns","findFiles","separateByAvailability","pathToGlob","require","glob","path","fs","isFile","filePath","statSync","error","patterns","options","processPatterns","extensions","cwd","process","map","files","addFile","indexOf","push","forEach","file","resolve","pattern","realpathSync","sync","nodir","availableFiles","unAvailableFiles","extname"],"mappings":"AAAA;AACA;;;;;QAiBgBA,mB,GAAAA,mB;QAaAC,S,GAAAA,S;QA8BAC,sB,GAAAA,sB;AA3DhB,IAAMC,aAAaC,QAAQ,sBAAR,CAAnB;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,KAAKH,QAAQ,IAAR,CAAX;AACA,IAAMI,SAAS,SAATA,MAAS,CAACC,QAAD,EAAc;AACzB,QAAI;AACA,eAAOF,GAAGG,QAAH,CAAYD,QAAZ,EAAsBD,MAAtB,EAAP;AACH,KAFD,CAEE,OAAOG,KAAP,EAAc;AACZ,eAAO,KAAP;AACH;AACJ,CAND;AAOA;;;;;AAKO,SAASX,mBAAT,CAA6BY,QAA7B,EAAqD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACxD,QAAMC,kBAAkBX,WAAW;AAC/BY,oBAAYF,QAAQE,UAAR,IAAsB,EADH;AAE/BC,aAAKH,QAAQG,GAAR,IAAeC,QAAQD,GAAR;AAFW,KAAX,CAAxB;AAIA,WAAOJ,SAASM,GAAT,CAAaJ,eAAb,CAAP;AACH;AACD;;;;;;AAMO,SAASb,SAAT,CAAmBW,QAAnB,EAA2C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAC9C,QAAMG,MAAMH,QAAQG,GAAR,IAAeC,QAAQD,GAAR,EAA3B;AACA,QAAMG,QAAQ,EAAd;AACA,QAAMC,UAAU,SAAVA,OAAU,CAACX,QAAD,EAAc;AAC1B,YAAIU,MAAME,OAAN,CAAcZ,QAAd,MAA4B,CAAC,CAAjC,EAAoC;AAChCU,kBAAMG,IAAN,CAAWb,QAAX;AACH;AACJ,KAJD;AAKAG,aAASW,OAAT,CAAiB,mBAAW;AACxB,YAAMC,OAAOlB,KAAKmB,OAAL,CAAaT,GAAb,EAAkBU,OAAlB,CAAb;AACA,YAAIlB,OAAOgB,IAAP,CAAJ,EAAkB;AACdJ,oBAAQb,GAAGoB,YAAH,CAAgBH,IAAhB,CAAR;AACH,SAFD,MAEO;AACHnB,iBAAKuB,IAAL,CAAUF,OAAV,EAAmB;AACfG,uBAAO;AADQ,aAAnB,EAEGN,OAFH,CAEW,oBAAY;AACnB;AACA;AACAH,wBAAQd,KAAKmB,OAAL,CAAahB,QAAb,CAAR;AACH,aAND;AAOH;AACJ,KAbD;AAcA,WAAOU,KAAP;AACH;;AAED;;;;;AAKO,SAASjB,sBAAT,CAAgCiB,KAAhC,EAAqD;AAAA,QAAdN,OAAc,uEAAJ,EAAI;;AACxD,QAAME,aAAaF,QAAQE,UAAR,IAAsB,EAAzC;AACA,QAAMe,iBAAiB,EAAvB;AACA,QAAMC,mBAAmB,EAAzB;AACAZ,UAAMI,OAAN,CAAc,oBAAY;AACtB,YAAMS,UAAU1B,KAAK0B,OAAL,CAAavB,QAAb,CAAhB;AACA,YAAIM,WAAWM,OAAX,CAAmBW,OAAnB,MAAgC,CAAC,CAArC,EAAwC;AACpCD,6BAAiBT,IAAjB,CAAsBb,QAAtB;AACH,SAFD,MAEO;AACHqB,2BAAeR,IAAf,CAAoBb,QAApB;AACH;AACJ,KAPD;AAQA,WAAO;AACHqB,sCADG;AAEHC;AAFG,KAAP;AAIH","file":"find-util.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst pathToGlob = require(\"path-to-glob-pattern\");\nconst glob = require(\"glob\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst isFile = (filePath) => {\n    try {\n        return fs.statSync(filePath).isFile();\n    } catch (error) {\n        return false;\n    }\n};\n/**\n * filter files by config\n * @param {string[]} patterns glob patterns\n * @param {{extensions?: string[], cwd?: string }} options\n */\nexport function pathsToGlobPatterns(patterns, options = {}) {\n    const processPatterns = pathToGlob({\n        extensions: options.extensions || [],\n        cwd: options.cwd || process.cwd()\n    });\n    return patterns.map(processPatterns);\n}\n/**\n * found files by glob pattern\n * @param {string[]} patterns\n * @param {{cwd?: string }} options\n * @returns {string[]} file path list\n */\nexport function findFiles(patterns, options = {}) {\n    const cwd = options.cwd || process.cwd();\n    const files = [];\n    const addFile = (filePath) => {\n        if (files.indexOf(filePath) === -1) {\n            files.push(filePath);\n        }\n    };\n    patterns.forEach(pattern => {\n        const file = path.resolve(cwd, pattern);\n        if (isFile(file)) {\n            addFile(fs.realpathSync(file));\n        } else {\n            glob.sync(pattern, {\n                nodir: true\n            }).forEach(filePath => {\n                // workaround for windows\n                // https://github.com/isaacs/node-glob/issues/74#issuecomment-31548810\n                addFile(path.resolve(filePath));\n            });\n        }\n    });\n    return files;\n}\n\n/**\n * @param {string[]} files\n * @param {{extensions: string[]}} options\n * @returns {{availableFiles: string[], unAvailableFiles: string[]}}\n */\nexport function separateByAvailability(files, options = {}) {\n    const extensions = options.extensions || [];\n    const availableFiles = [];\n    const unAvailableFiles = [];\n    files.forEach(filePath => {\n        const extname = path.extname(filePath);\n        if (extensions.indexOf(extname) === -1) {\n            unAvailableFiles.push(filePath);\n        } else {\n            availableFiles.push(filePath);\n        }\n    });\n    return {\n        availableFiles,\n        unAvailableFiles\n    };\n}\n"]}