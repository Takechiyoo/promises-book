{"version":3,"sources":["../src/textlint-core.js"],"names":["path","require","ObjectAssign","TextlintCore","config","defaultPlugins","markdown","text","kernel","pluginCreatorSet","ruleCreatorSet","filterRuleCreatorSet","Processor","name","plugins","rules","rulesConfig","ext","options","_mergeSetupOptions","lintText","filePath","absoluteFilePath","resolve","process","cwd","extname","then","fixText","configFileBaseDir","configFile","dirname","undefined","configBaseDir","toKernelPluginsFormat","toKernelRulesFormat","filterRules"],"mappings":"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","file":"textlint-core.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n textlint-core.js is a class\n textlint.js is a singleton object that is instance of textlint-core.js.\n */\nconst path = require(\"path\");\nconst ObjectAssign = require(\"object-assign\");\nimport { TextlintKernel } from \"@textlint/kernel\";\nimport { readFile } from \"./util/fs-promise\";\nimport markdownPlugin from \"textlint-plugin-markdown\";\nimport textPlugin from \"textlint-plugin-text\";\nimport RuleCreatorSet from \"./core/rule-creator-set\";\nimport PluginCreatorSet from \"./core/plugin-creator-set\";\n\n/**\n * @class {TextlintCore}\n */\nexport default class TextlintCore {\n    constructor(config = {}) {\n        // this.config often is undefined.\n        this.config = config;\n        // Markdown and Text is enabled by default\n        // Markdown and Text are for backward compatibility.\n        this.defaultPlugins = {\n            markdown: markdownPlugin,\n            text: textPlugin\n        };\n        // TODO: remove `config`\n        // https://github.com/textlint/textlint/issues/296\n        this.kernel = new TextlintKernel(config);\n        this.pluginCreatorSet = new PluginCreatorSet(this.defaultPlugins);\n        this.ruleCreatorSet = new RuleCreatorSet();\n        this.filterRuleCreatorSet = new RuleCreatorSet();\n    }\n\n    /**\n     * Use setupPlugins insteadof it.\n     *\n     * ````\n     * textlint.setupPlugins({\n     *   yourPluginName: yourPlugin\n     * });\n     * ````\n     *\n     * @param {*} Processor\n     * @deprecated\n     *\n     * It will be removed\n     */\n    addProcessor(Processor) {\n        this.pluginCreatorSet = new PluginCreatorSet(ObjectAssign({}, this.defaultPlugins, {\n            [`${Processor.name}@deprecated`]: {\n                Processor\n            }\n        }));\n    }\n\n    /**\n     * register Processors\n     * @param {Object} plugins\n     */\n    setupPlugins(plugins = {}) {\n        this.pluginCreatorSet = new PluginCreatorSet(ObjectAssign({}, this.defaultPlugins, plugins));\n    }\n\n\n    /**\n     * Register rules and rulesConfig.\n     * if want to release rules, please call {@link resetRules}.\n     * @param {object} rules rule objects array\n     * @param {object} [rulesConfig] ruleConfig is object\n     */\n    setupRules(rules = {}, rulesConfig = {}) {\n        this.ruleCreatorSet = new RuleCreatorSet(rules, rulesConfig);\n    }\n\n    /**\n     * Register filterRules and filterRulesConfig.\n     * if want to release rules, please call {@link resetRules}.\n     * @param {object} rules rule objects array\n     * @param {object} [rulesConfig] ruleConfig is object\n     */\n    setupFilterRules(rules = {}, rulesConfig = {}) {\n        this.filterRuleCreatorSet = new RuleCreatorSet(rules, rulesConfig);\n    }\n\n    /**\n     * Remove all registered rule and clear messages.\n     */\n    resetRules() {\n        this.pluginCreatorSet = new PluginCreatorSet(this.defaultPlugins);\n        this.ruleCreatorSet = new RuleCreatorSet();\n        this.filterRuleCreatorSet = new RuleCreatorSet();\n    }\n\n    /**\n     * lint text by registered rules.\n     * The result contains target filePath and error messages.\n     * @param {string} text\n     * @param {string} ext ext is extension. default: .txt\n     * @returns {Promise.<TextLintResult>}\n     */\n    lintText(text, ext = \".txt\") {\n        const options = this._mergeSetupOptions({\n            ext\n        });\n        return this.kernel.lintText(text, options);\n    }\n\n    /**\n     * lint markdown text by registered rules.\n     * The result contains target filePath and error messages.\n     * @param {string} text markdown format text\n     * @returns {Promise.<TextLintResult>}\n     */\n    lintMarkdown(text) {\n        const ext = \".md\";\n        const options = this._mergeSetupOptions({\n            ext\n        });\n        return this.kernel.lintText(text, options);\n    }\n\n    /**\n     * lint file and return result object\n     * @param {string} filePath\n     * @returns {Promise.<TextLintResult>} result\n     */\n    lintFile(filePath) {\n        const absoluteFilePath = path.resolve(process.cwd(), filePath);\n        const ext = path.extname(absoluteFilePath);\n        const options = this._mergeSetupOptions({\n            ext,\n            filePath: absoluteFilePath\n        });\n        return readFile(absoluteFilePath).then(text => {\n            return this.kernel.lintText(text, options);\n        });\n    }\n\n    /**\n     * fix file and return fix result object\n     * @param {string} filePath\n     * @returns {Promise.<TextLintFixResult>}\n     */\n    fixFile(filePath) {\n        const absoluteFilePath = path.resolve(process.cwd(), filePath);\n        const ext = path.extname(absoluteFilePath);\n        const options = this._mergeSetupOptions({\n            ext,\n            filePath: absoluteFilePath\n        });\n        return readFile(absoluteFilePath).then(text => {\n            return this.kernel.fixText(text, options);\n        });\n    }\n\n    /**\n     * fix texts and return fix result object\n     * @param {string} text\n     * @param {string} ext\n     * @returns {Promise.<TextLintFixResult>}\n     */\n    fixText(text, ext = \".txt\") {\n        const options = this._mergeSetupOptions({\n            ext\n        });\n        return this.kernel.fixText(text, options);\n    }\n\n    /**\n     * @private\n     */\n    _mergeSetupOptions(options) {\n        const configFileBaseDir = typeof this.config.configFile === \"string\"\n            ? path.dirname(this.config.configFile)\n            : undefined;\n        return ObjectAssign({}, options, {\n            configBaseDir: configFileBaseDir,\n            plugins: this.pluginCreatorSet.toKernelPluginsFormat(),\n            rules: this.ruleCreatorSet.toKernelRulesFormat(),\n            filterRules: this.filterRuleCreatorSet.toKernelRulesFormat(),\n        });\n    }\n}\n"]}